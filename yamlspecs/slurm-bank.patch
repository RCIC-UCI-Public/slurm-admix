diff -Naur slurm-bank-1.4.2/slurm-bank.spec slurm-bank-1.4.2-new/slurm-bank.spec
--- slurm-bank-1.4.2/slurm-bank.spec	2022-08-20 15:11:48.000000000 -0700
+++ slurm-bank-1.4.2-new/slurm-bank.spec	2023-05-24 14:48:43.573658729 -0700
@@ -2,7 +2,7 @@
 
 Name:           slurm-bank
 Version:        1.4.2
-Release:        1%{?dist}
+Release:        3%{?dist}
 Summary:        SLURM Bank, a collection of wrapper scripts to do banking
 
 Group:          System
diff -Naur slurm-bank-1.4.2/src/sbank slurm-bank-1.4.2-new/src/sbank
--- slurm-bank-1.4.2/src/sbank	2022-08-20 15:03:51.000000000 -0700
+++ slurm-bank-1.4.2-new/src/sbank	2023-04-07 16:19:41.000000000 -0700
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/bash
 
 # somewhat emulate GOLD's gdeposit account
 #
diff -Naur slurm-bank-1.4.2/src/_sbank-balance.pl slurm-bank-1.4.2-new/src/_sbank-balance.pl
--- slurm-bank-1.4.2/src/_sbank-balance.pl	2022-08-20 15:03:51.000000000 -0700
+++ slurm-bank-1.4.2-new/src/_sbank-balance.pl	2023-05-18 15:02:41.000000000 -0700
@@ -93,7 +93,7 @@
 		printf "%10s %9s + %14s %9s\n",
 			"-"x10, "-"x9, "-"x14, "-"x9;
 	} else {
-		printf "%-10s %9s | %14s %9s | %13s %9s (CPU hrs)\n",
+		printf "%-10s %9s | %14s %9s | %13s %9s (SUs)\n",
 			"User", "Usage", "Account", "Usage", "Account Limit", "Available";
 		printf "%10s %9s + %14s %9s + %13s %9s\n",
 			"-"x10, "-"x9, "-"x14, "-"x9, "-"x13, "-"x9;
@@ -118,7 +118,8 @@
 			$thisuser, fmt_mins_as_hrs($user_usage),
 			$acc, fmt_mins_as_hrs($acc_usage),
 			fmt_mins_as_hrs($acc_limit),
-			($acc_limit == 0) ? "N/A" : fmt_mins_as_hrs($acc_limit - $acc_usage);
+			fmt_mins_as_hrs($acc_limit - $acc_usage);
+			#($acc_limit == 0) ? "N/A" : fmt_mins_as_hrs($acc_limit - $acc_usage);
 	}
 }
 
@@ -132,7 +133,9 @@
 	my @account_list = sort keys %user_usage_per_acc;
 	my $first_iter   = 1;
 	my $rawusage;
-
+        # specific user usage and unformatted user name
+        my $userusage;
+        my $user_ufmt;  
 	if ($include_root) {
 		# instead of a purely sorted list, show the 'ROOT' account first (assuming
 		# that the account is actually called 'ROOT')
@@ -157,7 +160,7 @@
 
 		if (!$first_iter && $multiple_accs) {
 			# separate each account
-			print "\n";
+			print "\n";  #NPW comment
 		}
 		$first_iter = 0;
 
@@ -169,13 +172,28 @@
 			#	$acc_limits{$account} = 0;
 			#}
 
-			# stop warnings if this account doesn't have any usage
+			if ($user eq "") {
+				$user = $thisuser;
+			}
+			
 			if (! exists($acc_usage{$account})) {
-				$acc_usage{$account} = 0;
+			        $acc_usage{$account} = 0;
 			}
 
-			#print_values($thisuser, $user_usage{$account}, $account, $acc_usage{$account}, $acc_limits{$account});
-			print_values($thisuser, $user_usage_per_acc{$account}{$thisuser}, $account, $acc_usage{$account}, $acc_limits{$account}, $use_sreport);
+		        if (! exists($acc_limits{$account}{$user})) {
+				$acc_limits{$account}{$user} = 0;
+			}
+		        if (not defined $acc_limits{$account}{$user}) {
+				$acc_limits{$account}{$user} = 0;
+			}
+
+                        # Do we use the total account usage or the user-specific usage.
+                        if ( $acc_limits{$account}{$user} == $acc_limits{$account}{$account} ) {
+                            $userusage = $acc_usage{$account};
+                        } else {
+                            $userusage = $user_usage_per_acc{$account}{$user};
+                        }
+			print_values($user, $user_usage_per_acc{$account}{$user}, $account, $userusage, $acc_limits{$account}{$user}, $use_sreport);
 
 		} else {
 			# else loop over the users
@@ -185,6 +203,7 @@
 				# (already in alphabetical order)
 
 				$rawusage = $user_usage_per_acc{$account}{$user};
+                                $user_ufmt = $user;
 
 				# highlight current user
 				if ($multiple_users && $user eq $thisuser) {
@@ -201,7 +220,21 @@
 					$acc_usage{$account} = 0;
 				}
 
-				print_values($user, sprintf("%.0f", $rawusage), $account, $acc_usage{$account}, $acc_limits{$account}, $use_sreport);
+				# check if account is defined and exists
+				if (! defined($acc_limits{$account}{$user_ufmt})) {
+					$acc_limits{$account}{$user_ufmt} = 0;
+				} 
+				if (! exists($acc_limits{$account}{$account})) {
+					$acc_limits{$account}{$account} = 0;
+				}
+
+                                # Do we use the total account usage or the user-specific usage.
+                                if ( $acc_limits{$account}{$user_ufmt} == $acc_limits{$account}{$account} ) {
+                                     $userusage = $acc_usage{$account};
+                                } else {
+                                     $userusage = $user_usage_per_acc{$account}{$user_ufmt};
+                                }
+				print_values($user, sprintf("%.0f", $rawusage), $account, $userusage, $acc_limits{$account}{$user_ufmt}, $use_sreport);
 			}
 		}
 	}
@@ -280,7 +313,7 @@
 			$user         = $2;
 			$rawusage     = $3;
 
-			if (exists( $acc_limits{$account} ) && $user eq "") {
+			if (exists( $acc_limits{$account}{$account} ) && $user eq "") {
 				# the first line is the overall account usage
 				$acc_usage{$account} = $rawusage;
 
@@ -289,11 +322,11 @@
 					last;
 				}
 
-			} elsif ($thisuser_only && $user eq $thisuser && exists( $acc_limits{$account} )) {
+			} elsif ($thisuser_only && $user eq $thisuser && exists( $acc_limits{$account}{$thisuser} )) {
 				# only reporting on the given user, not on all users in the account
 				$user_usage_per_acc{$account}{$thisuser} = $rawusage;
 
-			} elsif (exists( $acc_limits{$account} )) {
+			} elsif (exists( $acc_limits{$account}{$account} )) {
 				# otherwise report on all users in the account
 				$user_usage_per_acc{$account}{$user} = $rawusage;
 
@@ -332,7 +365,7 @@
 			$user         = $2;
 			$rawusage     = $3;
 
-			if (exists( $acc_limits{$account} ) && $user eq "") {
+			if (exists( $acc_limits{$account}{$account} ) && $user eq "") {
 				# the first line is the overall account usage
 				$acc_usage{$account} = sprintf("%.0f", $rawusage/60); # sshare reports in seconds
 
@@ -341,11 +374,11 @@
 					last;
 				}
 
-			} elsif ($thisuser_only && $user eq $thisuser && exists( $acc_limits{$account} )) {
+			} elsif ($thisuser_only && $user eq $thisuser && exists( $acc_limits{$account}{$thisuser} )) {
 				# only reporting on the given user, not on all users in the account
 				$user_usage_per_acc{$account}{$thisuser} = sprintf("%.0f", $rawusage/60); # sshare reports in seconds
 
-			} elsif (exists( $acc_limits{$account} )) {
+			} elsif (exists( $acc_limits{$account}{$account} )) {
 				# otherwise report on all users in the account
 				$user_usage_per_acc{$account}{$user} = sprintf("%.0f", $rawusage/60); # sshare reports in seconds
 
@@ -386,7 +419,7 @@
 }
 
 if (defined($opts{u})) {
-	$thisuser = $opts{u};
+	$thisuser = "\L$opts{u}"; # normalize user name to lower case otherwise sshare doe snot work
 }
 
 if (defined($opts{U})) {
@@ -438,19 +471,55 @@
 # because sreport will show usage from deleted accounts
 #####################################################################
 
-open (SACCTMGR, "sacctmgr list association cluster=$clustername format='Account,GrpCPUMins'" .
-		" -p -n |")
-	or die "$0: Unable to run sacctmgr: $!\n";
+#####################################################################
+# run sacctmgr to find all Account limits from the list of Assocations
+# check if an account or a user waas givem and in this case run a help
+# query to limit sacctmgr search only to those values. Improves speed
+#####################################################################
+
+my $query_str = "sacctmgr list association -np cluster=$clustername format=Account,User,GrpCPUMins ";
+
+# if account is givem use it
+my $uaccounts = $accountname; 
+# otherwise find only accounts this user belongs to
+if ($showallaccs == 0) {
+    if ($accountname eq "") {
+	my $query_str1 = "sacctmgr show association -np format=Account user=$thisuser\n";
+	open (SACCTMGR, "$query_str1 |") or die "$0: Unable to run sacctmgr: $!\n";
+	while (<SACCTMGR>) {
+		my @fields=split('\|',$_);
+		my $acct = $fields[0];
+		$uaccounts .= ",$acct";
+	}
+    }
+    # udpate generic query with specific accounts for the user
+    $query_str .= "accounts=$uaccounts ";
+}
+
+
+open (SACCTMGR, "$query_str |") or die "$0: Unable to run sacctmgr: $!\n";
 
 # GrpCPUMins are not in 'sreport'
 while (<SACCTMGR>) {
-	# format is "acct_string|nnnn|" where nnnn is the number of GrpCPUMins allocated
-	if (/^([^|]+)\|([^|]*)/) {
-		if ($2 ne "") {
-			$acc_limits{"\U$1"} = sprintf("%.0f", $2); # normalise account names to uppercase
-		} elsif (!exists($acc_limits{"\U$1"})) {
+	# format is "acct_string|user|nnnn|" where nnnn is the number of GrpCPUMins allocated
+        my @fields=split('\|',$_);
+        my $acct = $fields[0];
+        my $user = $fields[1];
+        my $sus = $fields[2];
+	if ($#fields == 3) {
+                # want just the account allocation, limits on users are ignored
+		if ($sus ne "" && $user eq "") {
+			$acc_limits{"\U$acct"}{"\U$acct"} = sprintf("%.0f", $sus); # normalise account names to uppercase
+		} elsif (!exists($acc_limits{"\U$acct"}{$user})) {
+                        if ($sus ne "") {
+                             $acc_limits{"\U$acct"}{$user} = $sus;
+                        }
+                        else {
+                             $acc_limits{"\U$acct"}{$user} = $acc_limits{"\U$acct"}{"\U$acct"};
+                        }
+		} elsif (!exists($acc_limits{"\U$acct"}{"\U$acct"})) {
 			# store all accounts, even those without GrpCPUMins allocated, so we can report usage
-			$acc_limits{"\U$1"} = 0; # normalise account names to uppercase
+			$acc_limits{"\U$acct"}{"\U$acct"} = 0; # normalise account names to uppercase
 		}
 	}
 
@@ -478,7 +547,6 @@
 # - Scenario #5 show only my usage, in all of my accounts
 #########################################################################################
 
-
 if ($showallusers && $accountname ne "") {
 	#####################################################################
 	# - Scenario #1 showallusers in a named account
@@ -486,9 +554,7 @@
 	# show all users in the given account
 	#####################################################################
 
-	my $cluster_str = ($clustername ne "") ? "clusters=$clustername " : "";
-
-	if (!exists($acc_limits{$accountname})) {
+	if (!exists($acc_limits{$accountname}{$accountname})) {
 		die "$0: account '$accountname' doesn't exist. Exiting..\n";
 	}
 
@@ -513,8 +579,6 @@
 	# we need to show all users in ALL Accounts
 	#####################################################################
 
-	my $cluster_str = ($clustername ne "") ? "clusters=$clustername " : "";
-
 	# first obtain the full list of users for all accounts; sreport won't report
 	# on them if they have no usage
 	query_users_and_accounts("", "", "");
@@ -538,15 +602,13 @@
 	# and secondly to dump all users in those accounts
 	#####################################################################
 
-	my $cluster_str = ($clustername ne "") ? "clusters=$clustername " : "";
-
 	###############################################################################
 	# sacctmgr #1 -- obtain the usage for this user, and also the list of all of their accounts
 	###############################################################################
 
 	# first obtain the full list of users for all accounts; sreport won't report
 	# on them if they have no usage
-	query_users_and_accounts("", "", 1);
+	query_users_and_accounts($uaccounts, "", 1);
 
 	if (defined($opts{s})) {
 		# SREPORT: get the usage values (for all users in the accounts), for all the accounts of the given user
@@ -565,10 +627,7 @@
 	# show only the balance for $accountname, unformatted
 	#####################################################################
 
-	#my $cluster_str = ($clustername ne "") ? "-M $clustername " : "";
-	my $cluster_str = ($clustername ne "") ? "clusters=$clustername " : "";
-
-	if (!exists($acc_limits{$accountname})) {
+	if (!exists($acc_limits{$accountname}{$accountname})) {
 		die "$0: account '$accountname' doesn't exist. Exiting..\n";
 	}
 
@@ -580,7 +639,7 @@
 	}
 
 	# this is minutes - we need to convert to hours
-	printf "%.0f\n", (($acc_limits{$accountname} - $acc_usage{$accountname})/60);
+	printf "%.0f\n", (($acc_limits{$accountname}{$accountname} - $acc_usage{$accountname})/60);
 
 } else {
 	#####################################################################
@@ -590,13 +649,12 @@
 	# and secondly to dump all users in those accounts
 	#####################################################################
 
-	my $cluster_str = ($clustername ne "") ? "clusters=$clustername " : "";
-
 	###############################################################################
 	# sacctmgr #1 -- obtain the usage for this user, and also the list of all of their accounts
 	###############################################################################
 
-	query_users_and_accounts("", $thisuser, 1);
+	#query_users_and_accounts("", $thisuser, 1);
+	query_users_and_accounts($uaccounts, $thisuser, 1);
 
 	if (defined($opts{s})) {
 		# SREPORT get the usage values (for just the given user), for all the accounts of the given user
